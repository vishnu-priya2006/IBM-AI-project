# -*- coding: utf-8 -*-
"""Citizen AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bNopbUQsqdzf2AlP4_LvOVQagbx6Fovj
"""

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

# Set pad token if not present
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# Response generator
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

# City analysis function
def city_analysis(city_name):
    prompt = f"""Provide a detailed analysis of {city_name} including:
1. Crime Index and safety statistics
2. Accident rates and traffic safety information
3. Overall safety assessment

City: {city_name}"""
    return generate_response(prompt, max_length=1000)

# Citizen query function
def citizen_interaction(query):
    prompt = f"""As a government assistant, provide accurate and helpful information about the following citizen query related to public services, government policies, or civic issues:

Query: {query}"""
    return generate_response(prompt, max_length=1000)

# Build the Gradio interface
with gr.Blocks() as app:
    gr.Markdown("# üèôÔ∏è City Analysis & üßë‚Äçüíº Citizen Services AI")

    with gr.Tabs():
        # Tab 1: City Analysis
        with gr.TabItem("City Analysis"):
            with gr.Row():
                with gr.Column():
                    city_input = gr.Textbox(
                        label="Enter City Name",
                        placeholder="e.g., New York, London, Mumbai...",
                        lines=1
                    )
                    analyze_btn = gr.Button("Analyze City")
                with gr.Column():
                    city_output = gr.Textbox(
                        label="City Analysis (Crime Index & Accidents)",
                        lines=15
                    )
                    analyze_btn.click(fn=city_analysis, inputs=city_input, outputs=city_output)

            # Tab 2: Citizen Services
            with gr.TabItem("Citizen Services"):
                with gr.Row():
                    with gr.Column():
                        citizen_query = gr.Textbox(
                            label="Your Query",
                            placeholder="Ask about public services, government policies, civic issues...",
                            lines=4
                        )
                        query_btn = gr.Button("Get Information")
                    with gr.Column():
                        citizen_output = gr.Textbox(
                            label="Government Response",
                            lines=15
                        )
                        query_btn.click(fn=citizen_interaction, inputs=citizen_query, outputs=citizen_output)

    # Launch the app (public link if share=True)
    app.launch(share=True)o